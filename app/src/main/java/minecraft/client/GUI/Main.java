package minecraft.client.GUI;

import com.jtattoo.plaf.hifi.HiFiLookAndFeel;
import java.io.File;

import minecraft.client.GUI.Background.VersionsVanilla;
import minecraft.client.util.ColorUtils;

import javax.swing.BorderFactory;

import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.UIManager;
import javax.swing.border.Border;

import minecraft.client.GUI.Background.VersionDownloader;
import minecraft.client.GUI.Background.VersionsFabric;
import minecraft.client.GUI.Background.VersionsForge;

/**
 *
 * @author keiner5212
 */
public class Main extends javax.swing.JFrame {

    private String loaderVersionSelected = "";
    private Logger installerLogger;

    public Main() {

        try {
            // look and feel
            UIManager.setLookAndFeel(new HiFiLookAndFeel());

            // logo
            ImageIcon icono = new ImageIcon(getClass().getResource("/logo.png"));
            setIconImage(icono.getImage());

            // title
            setTitle("Minecraft Launcher (By keiner5212)");

        } catch (Exception e) {
            e.printStackTrace();
        }

        initComponents();

        // config
        setLocationRelativeTo(null);
        setResizable(true);
        loaderversionlabel.setVisible(false);
        loaderversion.setVisible(false);

        Border rightBorder = BorderFactory.createMatteBorder(0, 0, 0, 2, ColorUtils.hexStringToColor("#161313"));
        instalations_and_name.setBorder(rightBorder);
        Border topBorder = BorderFactory.createMatteBorder(2, 0, 0, 0, ColorUtils.hexStringToColor("#161313"));
        play_download.setBorder(topBorder);

        String userName = System.getProperty("user.name");
        String defaultDirPath = "C:\\Users\\" + userName + "\\AppData\\Roaming\\.minecraft";
        File defaultDir = new File(defaultDirPath);
        if (!defaultDir.exists()) {
            defaultDir.mkdirs();
        }
        gamedir.setText(defaultDir.getAbsolutePath());
        memory.setSelectedItem("4");

        try {
            VersionsVanilla versionsThread = new VersionsVanilla(versions, typeFilter.getSelectedItem().toString());
            Thread thread = new Thread(versionsThread);
            thread.start();
            thread.join();
            typeFilter.setEnabled(true);
            versions.setEnabled(true);
        } catch (Exception e) {
            e.printStackTrace();
        }

        installerLogger = new Logger(loggerscroll, logger, progressbar, progresslabel);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated
    // <editor-fold defaultstate="collapsed" desc="Generated
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        instalations_and_name = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        play_download = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        versions = new javax.swing.JComboBox<>();
        loaderlabel = new javax.swing.JLabel();
        Loader = new javax.swing.JComboBox<>();
        typelabel = new javax.swing.JLabel();
        typeFilter = new javax.swing.JComboBox<>();
        loaderversionlabel = new javax.swing.JLabel();
        loaderversion = new javax.swing.JComboBox<>();
        play = new javax.swing.JButton();
        loaderlabel1 = new javax.swing.JLabel();
        changedir = new javax.swing.JButton();
        gamedir = new javax.swing.JTextField();
        loaderlabel2 = new javax.swing.JLabel();
        memory = new javax.swing.JComboBox<>();
        loaderlabel3 = new javax.swing.JLabel();
        resolution = new javax.swing.JTextField();
        loggerscroll = new javax.swing.JScrollPane();
        logger = new javax.swing.JTextArea();
        progressbar = new javax.swing.JProgressBar();
        progresslabel = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setLayout(new javax.swing.BoxLayout(jPanel1, javax.swing.BoxLayout.LINE_AXIS));

        instalations_and_name.setMaximumSize(new java.awt.Dimension(300, 32767));
        instalations_and_name.setMinimumSize(new java.awt.Dimension(300, 0));

        javax.swing.GroupLayout instalations_and_nameLayout = new javax.swing.GroupLayout(instalations_and_name);
        instalations_and_name.setLayout(instalations_and_nameLayout);
        instalations_and_nameLayout.setHorizontalGroup(
            instalations_and_nameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
        instalations_and_nameLayout.setVerticalGroup(
            instalations_and_nameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        jPanel1.add(instalations_and_name);

        jLabel1.setFont(new java.awt.Font("Microsoft JhengHei UI", 0, 12)); // NOI18N
        jLabel1.setText("Select the game version:");

        versions.setFont(new java.awt.Font("Microsoft JhengHei UI", 0, 12)); // NOI18N
        versions.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Loading" }));
        versions.setEnabled(false);
        versions.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                versionsActionPerformed(evt);
            }
        });

        loaderlabel.setFont(new java.awt.Font("Microsoft JhengHei UI", 0, 12)); // NOI18N
        loaderlabel.setText("Select loader:");

        Loader.setFont(new java.awt.Font("Microsoft JhengHei UI", 0, 12)); // NOI18N
        Loader.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Vanilla", "Forge", "Fabric" }));
        Loader.setEnabled(false);
        Loader.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LoaderActionPerformed(evt);
            }
        });

        typelabel.setFont(new java.awt.Font("Microsoft JhengHei UI", 0, 12)); // NOI18N
        typelabel.setText("Type filter:");

        typeFilter.setFont(new java.awt.Font("Microsoft JhengHei UI", 0, 12)); // NOI18N
        typeFilter.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Any", "Release", "Snapshot", "Other" }));
        typeFilter.setEnabled(false);
        typeFilter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                typeFilterActionPerformed(evt);
            }
        });

        loaderversionlabel.setFont(new java.awt.Font("Microsoft JhengHei UI", 0, 12)); // NOI18N
        loaderversionlabel.setText("Loader Version:");

        loaderversion.setFont(new java.awt.Font("Microsoft JhengHei UI", 0, 12)); // NOI18N
        loaderversion.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Loading" }));
        loaderversion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loaderversionActionPerformed(evt);
            }
        });

        play.setBackground(new java.awt.Color(102, 255, 102));
        play.setFont(new java.awt.Font("Microsoft JhengHei UI", 0, 12)); // NOI18N
        play.setForeground(new java.awt.Color(0, 0, 0));
        play.setText("Play");
        play.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                playActionPerformed(evt);
            }
        });

        loaderlabel1.setFont(new java.awt.Font("Microsoft JhengHei UI", 0, 12)); // NOI18N
        loaderlabel1.setText("Game Dir:");

        changedir.setFont(jLabel1.getFont());
        changedir.setText("Change");
        changedir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                changedirActionPerformed(evt);
            }
        });

        gamedir.setFont(jLabel1.getFont());

        loaderlabel2.setFont(new java.awt.Font("Microsoft JhengHei UI", 0, 12)); // NOI18N
        loaderlabel2.setText("Memory (GB):");

        memory.setFont(jLabel1.getFont());
        memory.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "2", "3", "4", "5", "6", "7", "8", "9", "10" }));

        loaderlabel3.setFont(new java.awt.Font("Microsoft JhengHei UI", 0, 12)); // NOI18N
        loaderlabel3.setText("Resolution:");

        resolution.setText("1366x768");

        javax.swing.GroupLayout play_downloadLayout = new javax.swing.GroupLayout(play_download);
        play_download.setLayout(play_downloadLayout);
        play_downloadLayout.setHorizontalGroup(
            play_downloadLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(play_downloadLayout.createSequentialGroup()
                .addGap(45, 45, 45)
                .addGroup(play_downloadLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(play_downloadLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addGroup(play_downloadLayout.createSequentialGroup()
                            .addGroup(play_downloadLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(loaderlabel)
                                .addComponent(Loader, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGap(45, 45, 45)
                            .addGroup(play_downloadLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel1)
                                .addComponent(versions, javax.swing.GroupLayout.PREFERRED_SIZE, 168, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGap(45, 45, 45)
                            .addGroup(play_downloadLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addGroup(play_downloadLayout.createSequentialGroup()
                                    .addComponent(typelabel)
                                    .addGap(71, 71, 71))
                                .addComponent(typeFilter, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addComponent(play, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(play_downloadLayout.createSequentialGroup()
                        .addComponent(loaderlabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(gamedir, javax.swing.GroupLayout.PREFERRED_SIZE, 316, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(changedir))
                    .addGroup(play_downloadLayout.createSequentialGroup()
                        .addComponent(loaderlabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(memory, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(45, 45, 45)
                        .addComponent(loaderlabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(resolution, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 45, Short.MAX_VALUE)
                .addGroup(play_downloadLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(loaderversionlabel)
                    .addComponent(loaderversion, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(45, 45, 45))
        );
        play_downloadLayout.setVerticalGroup(
            play_downloadLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(play_downloadLayout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(play_downloadLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(loaderlabel)
                    .addComponent(typelabel)
                    .addComponent(loaderversionlabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(play_downloadLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(versions, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Loader, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(typeFilter, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(loaderversion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(play_downloadLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(changedir)
                    .addComponent(gamedir, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(loaderlabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(play_downloadLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(loaderlabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(memory, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(loaderlabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(resolution, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 63, Short.MAX_VALUE)
                .addComponent(play, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(23, 23, 23))
        );

        logger.setEditable(false);
        logger.setColumns(20);
        logger.setRows(5);
        logger.setText("logs:\n");
        logger.setFocusable(false);
        loggerscroll.setViewportView(logger);

        progressbar.setBackground(new java.awt.Color(102, 102, 102));

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(play_download, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addComponent(progresslabel, javax.swing.GroupLayout.PREFERRED_SIZE, 248, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(progressbar, javax.swing.GroupLayout.PREFERRED_SIZE, 353, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
            .addComponent(loggerscroll)
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(loggerscroll, javax.swing.GroupLayout.PREFERRED_SIZE, 223, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(progressbar, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(progresslabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(play_download, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        jPanel1.add(jPanel3);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void typeFilterActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_typeFilterActionPerformed
        VersionsVanilla versionsThread = new VersionsVanilla(versions, typeFilter.getSelectedItem().toString());
        Thread thread = new Thread(versionsThread);
        thread.start();
        if (typeFilter.getSelectedItem().toString().equals("Release")) {
            Loader.setEnabled(true);
        } else {
            Loader.setEnabled(false);
        }
    }// GEN-LAST:event_typeFilterActionPerformed

    private void LoaderActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_LoaderActionPerformed
        Thread thread;
        switch (Loader.getSelectedItem().toString()) {
            case "Fabric":
                loaderversionlabel.setVisible(true);
                loaderversion.setVisible(true);
                typeFilter.setEnabled(false);
                VersionsFabric versionsThreadFabric = new VersionsFabric(loaderversion);
                thread = new Thread(versionsThreadFabric);
                thread.start();

                break;

            case "Forge":
                loaderversionlabel.setVisible(true);
                loaderversion.setVisible(true);
                typeFilter.setEnabled(false);
                VersionsForge versionsThreadForge = new VersionsForge(loaderversion,
                        versions.getSelectedItem().toString());
                thread = new Thread(versionsThreadForge);
                thread.start();

                break;

            case "Vanilla":
                loaderversionlabel.setVisible(false);
                loaderversion.setVisible(false);
                typeFilter.setSelectedItem("Any");
                typeFilter.setEnabled(true);

                break;

            default:
                break;
        }
    }// GEN-LAST:event_LoaderActionPerformed

    private void loaderversionActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_loaderversionActionPerformed
        loaderVersionSelected = loaderversion.getSelectedItem().toString();
    }// GEN-LAST:event_loaderversionActionPerformed

    private void changedirActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_changedirActionPerformed
        String userName = System.getProperty("user.name");
        String defaultDirPath = "C:\\Users\\" + userName + "\\AppData\\Roaming\\.minecraft";
        File defaultDir = new File(defaultDirPath);
        if (!defaultDir.exists()) {
            defaultDir.mkdirs();
        }
        JFileChooser chooser = new JFileChooser(defaultDir);
        chooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        int returnVal = chooser.showOpenDialog(null);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File selectedDirectory = chooser.getSelectedFile();
            gamedir.setText(selectedDirectory.getAbsolutePath());
        }
    }// GEN-LAST:event_changedirActionPerformed

    private void versionsActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_versionsActionPerformed
        if (Loader.getSelectedItem().toString().equalsIgnoreCase("Forge")) {
            if (versions.getSelectedItem() == null) {
                return;
            }
            VersionsForge versionsThreadForge = new VersionsForge(loaderversion, versions.getSelectedItem().toString());
            Thread thread = new Thread(versionsThreadForge);
            thread.start();
        }
    }// GEN-LAST:event_versionsActionPerformed

    private void playActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_playActionPerformed
        VersionDownloader versionDownloader = new VersionDownloader(Loader.getSelectedItem().toString(),
                versions.getSelectedItem().toString(), loaderVersionSelected, gamedir.getText(), installerLogger);
        Thread thread = new Thread(versionDownloader);
        thread.start();
    }// GEN-LAST:event_playActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> Loader;
    private javax.swing.JButton changedir;
    private javax.swing.JTextField gamedir;
    private javax.swing.JPanel instalations_and_name;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JLabel loaderlabel;
    private javax.swing.JLabel loaderlabel1;
    private javax.swing.JLabel loaderlabel2;
    private javax.swing.JLabel loaderlabel3;
    private javax.swing.JComboBox<String> loaderversion;
    private javax.swing.JLabel loaderversionlabel;
    private javax.swing.JTextArea logger;
    private javax.swing.JScrollPane loggerscroll;
    private javax.swing.JComboBox<String> memory;
    private javax.swing.JButton play;
    private javax.swing.JPanel play_download;
    private javax.swing.JProgressBar progressbar;
    private javax.swing.JLabel progresslabel;
    private javax.swing.JTextField resolution;
    private javax.swing.JComboBox<String> typeFilter;
    private javax.swing.JLabel typelabel;
    private javax.swing.JComboBox<String> versions;
    // End of variables declaration//GEN-END:variables
}
